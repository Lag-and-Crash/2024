

pub0 = [42806607973392440, 315839070831423141, 303723039769366097, 200502629736196222, 116563955086659166, 167014815306381834, 283672579371072105, 143886443334301058, 298692924358165789, 47732942882790063, 22779955306622313, 165618036839352800, 136266383499160656, 146390609018330727, 185327926710749228, 142874017727554715, 1306731069376152, 17443930533427209, 5715728115643512, 142461652592666649, 99188855484719752, 293662938787586908, 172343180666199817, 123966165068616112, 281940469024124392, 312740583015053207, 236030589509155430, 54634462918642341, 208953388198682222, 353748896882983562, 302727945012202331, 299829667348190727, 144095663308493972, 345069181004993044, 222188241418118221, 208066596197715770, 178627312384417497, 354051383598078229, 220434139828224646, 203362399645435249, 149989216341931414, 146837742801432516, 88004143429971978, 237774179629338096, 58121643159007673, 36495716428897314, 307346104143759684, 100784270997210074]
c0 = 4368423913638473842

pub1 = [177628675256282721, 493478104451757846, 119250669978721553, 267494989709972827, 551597377047162625, 158450000209851768, 352086776234889632, 179534464818488680, 256507488779621828, 470412816767699720, 412519769143004461, 107941005425719937, 413784860476043961, 480559308557080059, 411707025212244034, 549694244753906103, 144783832819577954, 520685310518193937, 497679617930477389, 96215529356227988, 342011158749510528, 378391806981855664, 101616341729986093, 187847544746456680, 483699934765874578, 146794821280803087, 452834292516170633, 355784455863774406, 174543571950945478, 336700891776578206, 361300962592934732, 81320348371558357, 411115460896422403, 375103586367884341, 82181111110079921, 175249031051371214, 470889159501016396, 448854583311074772, 27281925489552562, 105608302774457502, 279063807857735216, 7770949280252796, 367523178104468365, 383537613931624733, 23981931838633516, 476511820914258372, 482900429827432070, 553110578398039082]
c1 = 7311579947912085503

pub2 = [70503537473470909, 48905551152852804, 125901654006969916, 96208762723720784, 94871459414070897, 82560217990031282, 118539601538348183, 57814869079080525, 20167596459544269, 17159110912436013, 31728468841398666, 46544750628381679, 133671477018575804, 46460743084333977, 38559270828558291, 39656391423447370, 117027847404923687, 117766431711666895, 5014017665776318, 86518309536950278, 49459681778069063, 7082876034384049, 83886302673209398, 134213267509922427, 133153282480470034, 90692129036137335, 145488081576664676, 18574404168235153, 87885369499717265, 127358894547325994, 129069049412041807, 89028350227902286, 91688999069282556, 121185914108159359, 50905350326440080, 38835629753444798, 99522160151867436, 23189092002547606, 77070610637808082, 145034659015546197, 119923668241521722, 27023664648931234, 81884966674767041, 41481811571451668, 75688070893227524, 26510388972874476, 139894307980990438, 113557900517558249]
c2 = 2281331901171654452

pub3 = [34667074129082675, 105012679091531669, 195711588295842880, 209331583132834172, 58631700049784570, 109759627630844328, 177801190073680578, 178991645748667092, 226789561578668191, 44008137630665240, 29961526777534656, 131838790516286185, 72647182861973022, 195392560329217647, 167881024831174446, 147525027964170719, 119344884349246192, 169220520684582103, 92602052596989618, 180628808953420530, 171662251979264660, 154422913081182086, 63112731274874410, 142003470551052331, 116681898940272941, 212557712228884256, 144262474031396666, 125910301897265248, 168384473418514340, 68659634299109413, 70884390697159477, 64372185372944557, 218778710771031264, 217552596071907681, 95985705464278040, 66817215364531846, 46846248586142126, 168189822836552648, 122067467032477625, 50205265537249901, 116853108254972374, 101606923771679937, 153115652938088271, 50759737342025028, 116180132096385097, 169383331943301081, 131293688535530242, 64053206431736324]
c3 = 3171980927148688094

# Refer to https://mathweb.ucsd.edu/~crypto/Projects/JenniferBakker/Math187/ on how lattices can be used to break knapsack cryptography!

def gen_matrix(pub, c):
    M = []
    for ptr, val in enumerate(pub):
        N = [0] * (len(pub)+1)
        N[ptr+1] = 1
        N[0] = val
        M.append(N)
    M.append( [-c] + [0]*len(pub)) # moved the pub and ct to the first vector, sage's LLL() algorithm seems to change when switching positions of certain vectors in the lattice
    return Matrix(ZZ, M)

def solve_knapsack(pub, c):
    M = gen_matrix(pub, c)
    for i in M.LLL():
        if all(j==1 or j==0 for j in i):
            print(i)
            ans = int(''.join([str(k) for k in i[1:]][::-1]),2).to_bytes(6, "big")
            return ans

m0 = solve_knapsack(pub0, c0)
m1 = solve_knapsack(pub1, c1)
m2 = solve_knapsack(pub2, c2)
m3 = solve_knapsack(pub3, c3)
print(m0 + m1 + m2 + m3)

